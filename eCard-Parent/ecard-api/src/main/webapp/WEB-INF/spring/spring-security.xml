<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:security="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
             xmlns:c="http://www.springframework.org/schema/c"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
              
<!--    <security:http realm="Protected API" 
    			   use-expressions="true"
    			   create-session="stateless"
                   auto-config="false"
                   entry-point-ref="unauthorizedEntryPoint">
        
        <access-denied-handler error-page="/user/403"/>
        <security:custom-filter ref="tokenAuthenticationFilter" position="FORM_LOGIN_FILTER"/>
        <security:intercept-url pattern="/api/**" access="isAuthenticated()"/>
    </security:http>

    <security:authentication-manager>

    </security:authentication-manager>

    <beans:bean id="unauthorizedEntryPoint" class="com.ecard.security.filter.UnauthorizedEntryPoint"/>
	
    <beans:bean id="tokenAuthenticationFilter" class="com.ecard.security.filter.CustomTokenAuthenticationFilter" c:logoutLink="/logout" />
    -->
    <beans:bean id="authenticationService" class="com.ecard.security.service.impl.AuthenticationServiceImpl"/>
    
    <!-- Security config for oauth management -->
    <security:http pattern="/api/oauth/token" create-session="stateless" 
                   authentication-manager-ref="clientAuthenticationManager" 
                   xmlns="http://www.springframework.org/schema/security">
        <security:intercept-url pattern="/api/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <security:anonymous enabled="false" />
        <!-- This allows authentication via standard basic auth header -->
        <security:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        <!-- This optionally allows authentication via request parameters -->
        <security:custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
        <security:access-denied-handler ref="oauthAccessDeniedHandler" />
        <logout delete-cookies="true" logout-url="/logout" />
        <security:csrf />
    </security:http>
    
    <beans:bean id="clientAuthenticationEntryPoint" 
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="api/oauth" />
        <beans:property name="typeName" value="Basic" />
    </beans:bean>
    
    <!-- Filter to handle authentication with clientId and secret via request parameters -->
    <beans:bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="clientAuthenticationManager" />
        <beans:property name="filterProcessesUrl" value="/api/oauth/token"/>
    </beans:bean>
    
    <beans:bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
 
    <authentication-manager id="clientAuthenticationManager" 
                            xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="userDetailsService" />
    </authentication-manager>
    
    <beans:bean id="userDetailsService" class="com.ecard.security.service.impl.UserDetailsServiceImpl"/>
</beans:beans>